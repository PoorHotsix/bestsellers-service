server:
  port: ${SPRING_BESTSELLERS_SERVER_PORT}

spring:
  application:
    name: bestsellers-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}
  # Quarkus 기반 Keycloak-Server 을 이용한 인증 처리
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${SPRING_KEYCLOAK_URL}/realms/inkcloud
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
  
  kafka:
    bootstrap-servers: ${SPRING_KAFKA}
    consumer:
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    listener:
      missing-topics-fatal: false

aws:
  dynamodb:
    region: ap-northeast-2
    # access-key: ${AWS_ACCESS_KEY_ID}
    # secret-key: ${AWS_SECRET_ACCESS_KEY}
    
# 로깅 설정
logging:
  level:
    "[org.springframework.web.servlet.DispatcherServlet]": debug  # 요청 매핑 로그
    "[org.springframework.security.web]": debug                   # 시큐리티 필터 체인 로그
    "[com.inkcloud.order_service]": debug                        # 애플리케이션 로그
    "[org.springframework.web.filter.CommonsRequestLoggingFilter]": debug  # 요청 로그
    "[org.springframework.security.web.authentication]": debug
    "[org.springframework.security.oauth2.server.resource]": debug
    "[org.springframework.security.oauth2.jwt]": debug

# Eureka-Server 에 자가 등록 설정
# eureka:
#   instance:
#     instance-id: ${spring.application.name}:${spring.cloud.client.hostname}:${server.port}
#     prefer-ip-address: true
#   client:  
#     register-with-eureka: true  
#     fetch-registry: true
#     service-url:
#       defaultZone: http://eureka-server:8761/eureka